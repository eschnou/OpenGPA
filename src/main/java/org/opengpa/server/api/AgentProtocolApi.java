/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.opengpa.server.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import org.opengpa.server.dto.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-22T20:04:39.683430+02:00[Europe/Brussels]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "agent", description = "the agent API")
public interface AgentProtocolApi {

    /**
     * POST /ap/v1/agent/tasks : Creates a task for the agent.
     *
     * @param taskRequestBody  (optional)
     * @return A new agent task was successfully created. (status code 200)
     *         or Unable to process request. Likely due to improperly formatted request. (status code 422)
     *         or Internal Server Error (status code 200)
     */
    @Operation(
        operationId = "createAgentTask",
        summary = "Creates a task for the agent.",
        tags = { "agent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A new agent task was successfully created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unable to process request. Likely due to improperly formatted request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "default", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ap/v1/agent/tasks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Task> createAgentTask(
        @Parameter(name = "TaskRequestBody", description = "") @Valid @RequestBody(required = false) Optional<TaskRequestBody> taskRequestBody
    );


    /**
     * GET /ap/v1/agent/tasks/{task_id}/artifacts/{artifact_id} : Download a specified artifact.
     *
     * @param taskId ID of the task (required)
     * @param artifactId ID of the artifact (required)
     * @return Returned the content of the artifact. (status code 200)
     *         or Unable to find entity with a given identifier (status code 404)
     *         or Internal Server Error (status code 200)
     */
    @Operation(
        operationId = "downloadAgentTaskArtifact",
        summary = "Download a specified artifact.",
        tags = { "agent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned the content of the artifact.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unable to find entity with a given identifier", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = GetAgentTask404Response.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAgentTask404Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ap/v1/agent/tasks/{task_id}/artifacts/{artifact_id}",
        produces = { "application/octet-stream", "application/json" }
    )
    
    ResponseEntity<org.springframework.core.io.Resource> downloadAgentTaskArtifact(
        @Parameter(name = "task_id", description = "ID of the task", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "artifact_id", description = "ID of the artifact", required = true, in = ParameterIn.PATH) @PathVariable("artifact_id") String artifactId
    );


    /**
     * POST /ap/v1/agent/tasks/{task_id}/steps : Execute a step in the specified agent task.
     *
     * @param taskId ID of the task (required)
     * @param stepRequestBody  (optional)
     * @return Executed step for the agent task. (status code 200)
     *         or Unable to find entity with a given identifier (status code 404)
     *         or Unable to process request. Likely due to improperly formatted request. (status code 422)
     *         or Internal Server Error (status code 200)
     */
    @Operation(
        operationId = "executeAgentTaskStep",
        summary = "Execute a step in the specified agent task.",
        tags = { "agent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Executed step for the agent task.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Step.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unable to find entity with a given identifier", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAgentTask404Response.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unable to process request. Likely due to improperly formatted request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "default", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ap/v1/agent/tasks/{task_id}/steps",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Step> executeAgentTaskStep(
        @Parameter(name = "task_id", description = "ID of the task", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "StepRequestBody", description = "") @Valid @RequestBody(required = false) Optional<StepRequestBody> stepRequestBody
    );


    /**
     * GET /ap/v1/agent/tasks/{task_id} : Get details about a specified agent task.
     *
     * @param taskId ID of the task (required)
     * @return Returned details about an agent task. (status code 200)
     *         or Unable to find entity with a given identifier (status code 404)
     *         or Internal Server Error (status code 200)
     */
    @Operation(
        operationId = "getAgentTask",
        summary = "Get details about a specified agent task.",
        tags = { "agent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned details about an agent task.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unable to find entity with a given identifier", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAgentTask404Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ap/v1/agent/tasks/{task_id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Task> getAgentTask(
        @Parameter(name = "task_id", description = "ID of the task", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId
    );


    /**
     * GET /ap/v1/agent/tasks/{task_id}/steps/{step_id} : Get details about a specified task step.
     *
     * @param taskId ID of the task (required)
     * @param stepId ID of the step (required)
     * @return Returned details about an agent task step. (status code 200)
     *         or Unable to find entity with a given identifier (status code 404)
     *         or Internal Server Error (status code 200)
     */
    @Operation(
        operationId = "getAgentTaskStep",
        summary = "Get details about a specified task step.",
        tags = { "agent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned details about an agent task step.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Step.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unable to find entity with a given identifier", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAgentTask404Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ap/v1/agent/tasks/{task_id}/steps/{step_id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Step> getAgentTaskStep(
        @Parameter(name = "task_id", description = "ID of the task", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "step_id", description = "ID of the step", required = true, in = ParameterIn.PATH) @PathVariable("step_id") String stepId
    );


    /**
     * GET /ap/v1/agent/tasks/{task_id}/artifacts : List all artifacts that have been created for the given task.
     *
     * @param taskId ID of the task (required)
     * @param currentPage Page number (optional, default to 1)
     * @param pageSize Number of items per page (optional, default to 10)
     * @return Returned the list of artifacts for the task. (status code 200)
     *         or Unable to find entity with a given identifier (status code 404)
     *         or Internal Server Error (status code 200)
     */
    @Operation(
        operationId = "listAgentTaskArtifacts",
        summary = "List all artifacts that have been created for the given task.",
        tags = { "agent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned the list of artifacts for the task.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskArtifactsListResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unable to find entity with a given identifier", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAgentTask404Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ap/v1/agent/tasks/{task_id}/artifacts",
        produces = { "application/json" }
    )
    
    ResponseEntity<TaskArtifactsListResponse> listAgentTaskArtifacts(
        @Parameter(name = "task_id", description = "ID of the task", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Min(1) @Parameter(name = "current_page", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "current_page", required = false, defaultValue = "1") Integer currentPage,
        @Min(1) @Parameter(name = "page_size", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "10") Integer pageSize
    );


    /**
     * GET /ap/v1/agent/tasks/{task_id}/steps : List all steps for the specified task.
     *
     * @param taskId ID of the task. (required)
     * @param currentPage Page number (optional, default to 1)
     * @param pageSize Number of items per page (optional, default to 10)
     * @return Returned list of agent&#39;s steps for the specified task. (status code 200)
     *         or Unable to find entity with a given identifier (status code 404)
     *         or Internal Server Error (status code 200)
     */
    @Operation(
        operationId = "listAgentTaskSteps",
        summary = "List all steps for the specified task.",
        tags = { "agent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned list of agent's steps for the specified task.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskStepsListResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unable to find entity with a given identifier", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAgentTask404Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ap/v1/agent/tasks/{task_id}/steps",
        produces = { "application/json" }
    )
    
    ResponseEntity<TaskStepsListResponse> listAgentTaskSteps(
        @Parameter(name = "task_id", description = "ID of the task.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Min(1) @Parameter(name = "current_page", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "current_page", required = false, defaultValue = "1") Integer currentPage,
        @Min(1) @Parameter(name = "page_size", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "10") Integer pageSize
    );


    /**
     * GET /ap/v1/agent/tasks : List all tasks that have been created for the agent.
     *
     * @param currentPage Page number (optional, default to 1)
     * @param pageSize Number of items per page (optional, default to 10)
     * @return Returned list of agent&#39;s tasks. (status code 200)
     *         or Internal Server Error (status code 200)
     */
    @Operation(
        operationId = "listAgentTasks",
        summary = "List all tasks that have been created for the agent.",
        tags = { "agent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned list of agent's tasks.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskListResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ap/v1/agent/tasks",
        produces = { "application/json" }
    )
    
    ResponseEntity<TaskListResponse> listAgentTasks(
        @Min(1) @Parameter(name = "current_page", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "current_page", required = false, defaultValue = "1") Integer currentPage,
        @Min(1) @Parameter(name = "page_size", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "10") Integer pageSize
    );


    /**
     * POST /ap/v1/agent/tasks/{task_id}/artifacts : Upload an artifact for the specified task.
     *
     * @param taskId ID of the task (required)
     * @param file File to upload. (required)
     * @param relativePath Relative path of the artifact in the agent&#39;s workspace. (optional)
     * @return Returned the content of the artifact. (status code 200)
     *         or Unable to find entity with a given identifier (status code 404)
     *         or Internal Server Error (status code 200)
     */
    @Operation(
        operationId = "uploadAgentTaskArtifacts",
        summary = "Upload an artifact for the specified task.",
        tags = { "agent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned the content of the artifact.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Artifact.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unable to find entity with a given identifier", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAgentTask404Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ap/v1/agent/tasks/{task_id}/artifacts",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    ResponseEntity<Artifact> uploadAgentTaskArtifacts(
        @Parameter(name = "task_id", description = "ID of the task", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "file", description = "File to upload.", required = true) @RequestPart(value = "file", required = true) MultipartFile file,
        @Parameter(name = "relative_path", description = "Relative path of the artifact in the agent's workspace.") @Valid @RequestParam(value = "relative_path", required = false) String relativePath
    );

}
